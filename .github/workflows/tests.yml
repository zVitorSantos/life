name: Testes e Cobertura

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: life_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: go mod download

    - name: Build API
      run: go build -o api

    - name: Start API
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: life_test
        JWT_SECRET: test_secret
        JWT_REFRESH_SECRET: test_refresh_secret
        PORT: 8080
        ENV: test
        GIN_MODE: test
      run: |
        ./api &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        # Aguarda a API ficar disponível
        for i in {1..30}; do
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "API está rodando!"
            break
          fi
          echo "Aguardando API... ($i/30)"
          sleep 2
        done
        
        # Verifica se a API está realmente rodando
        if ! curl -f http://localhost:8080/health > /dev/null 2>&1; then
          echo "Falha ao iniciar a API"
          exit 1
        fi

    - name: Run tests
      env:
        API_URL: http://localhost:8080/api/v1
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./tests/...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Stop API
      if: always()
      run: |
        if [ ! -z "$API_PID" ]; then
          kill $API_PID || true
        fi 